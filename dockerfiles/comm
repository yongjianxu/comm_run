FROM nvcr.io/nvidia/pytorch:25.04-py3 as base

#doca-ofed-userspace
RUN apt-get update
RUN export DOCA_URL="https://linux.mellanox.com/public/repo/doca/2.10.0/ubuntu24.04/x86_64/" && \
    curl https://linux.mellanox.com/public/repo/doca/GPG-KEY-Mellanox.pub | gpg --dearmor > /etc/apt/trusted.gpg.d/GPG-KEY-Mellanox.pub && \
    echo "deb [signed-by=/etc/apt/trusted.gpg.d/GPG-KEY-Mellanox.pub] $DOCA_URL ./" > /etc/apt/sources.list.d/doca.list && \
    apt update && \
    apt-get -y install doca-ofed-userspace
# sshd
apt install -y openssh-server
#rebuild perftest for cuda suport
WORKDIR /workspace
RUN git clone https://github.com/linux-rdma/perftest.git && \
    cd perftest && autoupdate && apt -y install libpci-dev && \
    ./autogen.sh && ./configure CUDA_H_PATH=/usr/local/cuda/include/cuda.h --prefix=/usr/local/perftest && make -j && make install
ENV PATH="/usr/local/perftest/bin:${PATH}"

# pcm tool
WORKDIR /workspace
RUN git clone https://github.com/intel/pcm.git && \
    cd pcm && mkdir build && cd build && cmake .. && cmake --build . --parallel

# TransferEngine
WORKDIR /workspace
RUN git clone https://github.com/kvcache-ai/Mooncake.git && \
    cd Mooncake && \
    bash dependencies.sh -y && bash
RUN cd /workspace/Mooncake && mkdir build  && cd build && cmake .. -DUSE_ETCD=ON -DUSE_CUDA=ON && make -j
RUN apt install -y etcd-server etcd-client
ENV PATH=/workspace/Mooncake/build/mooncake-transfer-engine/example:$PATH
ENV MC_GID_INDEX=3

# gdrcopy
WORKDIR /workspace
RUN git clone https://github.com/NVIDIA/gdrcopy.git && \
    cd gdrcopy && mkdir build && mkdir install && \
    make prefix=/workspace/gdrcopy/install CUDA=/usr/local/cuda all install
ENV PATH=/workspace/gdrcopy/install/bin:$PATH

# ucx 1.18.0
WORKDIR /workspace
RUN wget https://github.com/openucx/ucx/releases/download/v1.18.0/ucx-1.18.0.tar.gz && \
    tar xf ucx-1.18.0.tar.gz && cd ucx-1.18.0 && make install && \
    ./configure --prefix=/workspace/ucx-1.18.0/install --enable-shared --disable-static --disable-doxygen-doc --enable-optimizations --enable-cma --enable-devel-headers --with-cuda=/usr/local/cuda --with-verbs --with-dm --with-gdrcopy=//workspace/gdrcopy/install --enable-mt --without-go && \
    make -j && make -j install-strip && ldconfig
# NIXL
WORKDIR /workspace
RUN git clone https://github.com/ai-dynamo/nixl.git && \
    apt install -y build-essential cmake pkg-config && \
    pip3 install meson ninja pybind11
