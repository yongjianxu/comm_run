FROM nvcr.io/nvidia/pytorch:25.04-py3 as base

#doca-ofed-userspace
RUN apt-get update
RUN export DOCA_URL="https://linux.mellanox.com/public/repo/doca/2.10.0/ubuntu24.04/x86_64/" && \
    curl https://linux.mellanox.com/public/repo/doca/GPG-KEY-Mellanox.pub | gpg --dearmor > /etc/apt/trusted.gpg.d/GPG-KEY-Mellanox.pub && \
    echo "deb [signed-by=/etc/apt/trusted.gpg.d/GPG-KEY-Mellanox.pub] $DOCA_URL ./" > /etc/apt/sources.list.d/doca.list && \
    apt update && \
    apt-get -y install doca-ofed-userspace
# sshd
RUN apt install -y openssh-server
#rebuild perftest for cuda suport
WORKDIR /workspace
RUN git clone https://github.com/linux-rdma/perftest.git && \
    cd perftest && autoupdate && apt -y install libpci-dev && \
    ./autogen.sh && ./configure CUDA_H_PATH=/usr/local/cuda/include/cuda.h --prefix=/usr/local/perftest && make -j && make install
ENV PATH="/usr/local/perftest/bin:${PATH}"

# pcm tool
WORKDIR /workspace
RUN git clone https://github.com/intel/pcm.git && \
    cd pcm && mkdir build && cd build && cmake .. && cmake --build . --parallel

# TransferEngine
WORKDIR /workspace
RUN git clone https://github.com/kvcache-ai/Mooncake.git && \
    cd Mooncake && \
    bash dependencies.sh -y && bash
RUN apt install -y golang-go
RUN cd /workspace/Mooncake && mkdir build  && cd build && cmake .. -DUSE_ETCD=ON -DUSE_CUDA=ON && make -j
RUN apt install -y etcd-server etcd-client
ENV PATH=/workspace/Mooncake/build/mooncake-transfer-engine/example:$PATH
ENV MC_GID_INDEX=3

# GDRCOPY install.
# follow deepep dockerfile
WORKDIR /tmp
RUN git clone https://github.com/NVIDIA/gdrcopy.git
WORKDIR /tmp/gdrcopy
RUN git checkout v2.4.1

RUN apt update
RUN apt install -y nvidia-dkms-535
RUN apt install -y build-essential devscripts debhelper fakeroot pkg-config dkms
RUN apt install -y check libsubunit0 libsubunit-dev

WORKDIR /tmp/gdrcopy/packages
RUN CUDA=/usr/local/cuda ./build-deb-packages.sh
RUN dpkg -i gdrdrv-dkms_*.deb
RUN dpkg -i libgdrapi_*.deb
RUN dpkg -i gdrcopy-tests_*.deb
RUN dpkg -i gdrcopy_*.deb

ENV GDRCOPY_HOME=/usr/src/gdrdrv-2.4.1/

# ucx 1.18.0
# install ucx in private path for NIXL only
# /usr/local/ucx ->/opt/hpcx/ucx kept as orginal. other apps can use it
# ucx use the gdrcopy from previous step
WORKDIR /workspace
RUN wget https://github.com/openucx/ucx/releases/download/v1.18.0/ucx-1.18.0.tar.gz && \
    tar xf ucx-1.18.0.tar.gz && cd ucx-1.18.0 && mkdir install && \
    ./configure --prefix=/workspace/ucx-1.18.0/install --enable-shared --disable-static --disable-doxygen-doc --enable-optimizations --enable-cma --enable-devel-headers --with-cuda=/usr/local/cuda --with-verbs --with-dm --with-gdrcopy=/usr/src/gdrdrv-2.4.1/ --enable-mt --without-go && \
    make -j && make -j install-strip 
# etcd-cpp-api
# the dependencies&version are complex, need to complile from src
RUN apt install -y libcpprest-dev
WORKDIR /workspace
RUN git clone -b v3.21.12 https://github.com/protocolbuffers/protobuf.git && \
    cd protobuf && git submodule update --init --recursive && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local .. && make -j && make install
ENV LIBRARY_PATH=/usr/local/lib:$LIBRARY_PATH
ENV C_INCLUDE_PATH=/usr/local/include:$C_INCLUDE_PATH
ENV PATH=/usr/local/bin:$PATH 
RUN git clone -b v1.51.1 https://github.com/grpc/grpc.git && \
    cd grpc && git submodule update --init --recursive && mkdir build && cd build && cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release .. && make -j && make install
RUN git clone https://github.com/gogo/protobuf.git gogo-protobuf && \
    cd gogo-protobuf && make install
RUN git clone https://github.com/etcd-cpp-apiv3/etcd-cpp-apiv3.git && \
    cd /workspace/etcd-cpp-apiv3 && mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release && make -j && make install 

# NIXL
WORKDIR /workspace
RUN apt install -y build-essential cmake pkg-config && \
    pip3 install meson ninja pybind11
RUN git clone https://github.com/ai-dynamo/nixl.git && \
    cd nixl && meson setup build --prefix=/usr/local/nixl -Ducx_path=/workspace/ucx-1.18.0/install -Dinstall_headers=true && ninja && ninja install
ENV LD_LIBRARY_PATH=/usr/local/nixl/lib:$LD_LIBRARY_PATH
ENV LIBRARY_PATH=/usr/local/nixl/lib:$LIBRARY_PATH
ENV C_INCLUDE_PATH=/usr/local/nixl/include:$C_INCLUDE_PATH
ENV PATH=/usr/local/nixl/bin:$PATH
